
// standart streams
const stdin 0 end
const stdout 1 end
const stderr 2 end

// exit cods
const EXIT_SUCCESS 0 end
const EXIT_FAILURE 1 end


// symbols constants
const SPACE 32 end
const SYMBOL_0 48 end

// sizeofs
const sizeof(int)  4 end
const sizeof(bool) 4 end
const sizeof(ptr)  4 end

macro NULL 0 cast(ptr) end

// read & write wrappers
proc @ptr ptr -- ptr in @32 cast(ptr) end
proc !ptr ptr ptr -- in cast(int) !32 end

proc @bool ptr -- bool in @8 cast(bool) end
proc !bool ptr bool -- in cast(int) !8 end

macro @int @32 end
macro !int !32 end

proc ptr_diff ptr ptr -- int in
  swap cast(int)
  swap cast(int)
  -
end

proc strlen ptr -- int in
  dup
  while dup @8 0 = not do 1 + end
  swap ptr_diff
end

// C functions wrappers
proc write int ptr int -- int in
	c_call(3) write
end

proc malloc int -- ptr in
	c_call(1) malloc cast(ptr)
end

proc fputs ptr int in
	// excepts string on the stack
	// [ptr:string data, int:file descriptor]
	// fd len data fd
	swap dup strlen
	swap rot write drop drop
end

proc puts ptr -- in stdout fputs end
proc eputs ptr -- in stderr fputs end

macro endl "\n" end

proc inc32 ptr -- in dup @int 1 + !int end
proc dec32 ptr -- in dup @int 1 - !int end

proc ptr+ ptr int in
	swap dup @int rot
	+ !int drop
end

proc ptr- ptr int in
	swap dup @int rot
	- !int drop
end

macro todo!
	"TODO\n" puts
	EXIT_FAILURE exit
end

proc cstr_to_str ptr -- int ptr in
	// ins [ptr] : outs[int, ptr]
	dup strlen swap
end

// struct Str

const Str.count sizeof(ptr) offset end
const Str.data  sizeof(ptr) offset end
const sizeof(Str) 			reset end

proc !Str ptr ptr in
	// ins [ptr, ptr] : outs [ptr]
	memory str_len 4 end
	memory str_data 4 end
	swap cstr_to_str
	str_data swap !ptr
	str_len swap !int
	dup str_len @int !int
	dup Str.data + str_data
	@ptr !ptr drop
end

proc @Str.count ptr -- int in
	// ins [Str] : outs [int]
	// reads first 4 bytes of struct
	// where stored size
	@int
end

proc @Str.data ptr -- ptr in
	// ins [Str] : outs [ptr]
	// reads data field of Str struct
	Str.data + @ptr
end

proc @Str ptr -- int ptr in
	dup @Str.count
	swap @Str.data
end

proc !empty_Str ptr -- ptr in
	// ins [ptr] : outs [Str]
	dup 0 !int
	dup Str.data + NULL !ptr
end

proc str_cut ptr -- ptr in
	// ins [Str] : outs [Str]
	// Str
	dup dec32
	dup Str.data + inc32
end

// end of struct Str

proc memcpy ptr ptr int in
	memory src   sizeof(ptr) end
	memory dst   sizeof(ptr) end
	memory size  sizeof(int) end
	// src dst size
	size swap !int
	dst swap !ptr
	src swap !ptr
	// i 
	0 while dup size @int = not do
		dst @ptr over +
		@8 over src @ptr
		swap + swap !8
		1 +
	end drop
end

proc treverce_utos ptr int -- int in
	memory buffer sizeof(ptr) end

	swap buffer swap !ptr
	dup 0 = if
		buffer @ptr SYMBOL_0 !8
		buffer @ptr 1 + 0 !8
	end
	0 swap
	while dup 0 = not do
		dup SYMBOL_0 swap 10 % +
		buffer @ptr swap !8
		10 / swap 1 + swap
		buffer @ptr 1 + buffer swap cast(int) !32
	end
	drop 1 -
	dup
	buffer @ptr swap + 0 !8
	1 +
end

proc utos ptr int -- int in
	memory buffer 256 end
	memory userbuf  sizeof(ptr) end
	memory strsize  sizeof(int) end
	memory offs     sizeof(int) end
	memory offs2    sizeof(int) end
	
	over userbuf swap !ptr
	treverce_utos strsize swap !int

	offs 0 !32
	buffer userbuf @ptr strsize
	@int 1 + memcpy

	offs2 strsize @int 1 - !int

	// i
	0 while dup strsize @int < do
		userbuf @ptr offs @int +
		buffer offs2 @int + 1
		memcpy
		offs inc32
		offs2 dec32
		1 +
	end
end

proc fputu int int in
	memory putu_buffer 256 end
	swap
	putu_buffer swap utos drop
	putu_buffer swap fputs
end

proc fputuln int int in
	memory putu_buffer 256 end
	memory len sizeof(int) end
	swap
	putu_buffer swap utos len swap !int
	putu_buffer len @int + 10 !int
	putu_buffer swap fputs

end

proc putu int in
	stdout fputu
end

proc putuln int in
	stdout fputuln
end